[tool.ruff]
target-version = "py38"

[tool.ruff.lint]
select = [
       # "ANN0", # type annotations for function arguments
       # "B",  # likely bugs and design problems
       # "BLE",  # do not catch blind exception
       # "C4",  # better list/set/dict comprehensions
       # "C90",  # check McCabe complexity
       # "DTZ", # enforce timezone in date objects
       "E",  # pycodestyle error
       # "W",  # pycodestyle warning
       "F",  # pyflakes
       # "FA", # verify annotations from future
       # "G",  # format strings for logging statements
       # "N",  # naming conventions
       "I",  # isort
       # "ICN", # import conventions
       # "D1",  # require doc
       # "D2",  # doc formatting
       # "D4",  # doc convention
       # "PL",  # pylint
       # "PERF", # performance anti-patterns
       # "PT",  # pytest style
       # "PIE",  # misc lints
       # "RET",  # improvements for return statements
       # "RSE",  # improvements for rise statements
       # "S",  # security testing
       # "SIM",  # simplify code
       # "T10",  # debugging statements
       # "T20",  # print statements
       # "TID",  # tidier imports
       # "TRY",  # better exceptions
       # "UP",  # upgrade syntax for newer versions of the language
]
ignore = [
       "RET503", # don't enforce return-None
       "E712", # comparison to bool: violated by SQLAlchemy filters
       "PT004", # fixture does not return anything, add leading underscore: violated by clean_db
       "PLC1901", # simplify comparison to empty string: violated by SQLAlchemy filters
]

[tool.ruff.lint.per-file-ignores]
"ckanext/$PLUGIN/tests*" = ["S", "PL", "ANN"]
"ckanext/$PLUGIN/logic/*" = [
            "D417", # actions don't describe context and data_dict
]

[tool.ruff.lint.flake8-import-conventions.aliases]
"ckan.plugins" = "p"
"ckan.plugins.toolkit" = "tk"
sqlalchemy = "sa"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
section-order = [
              "future",
              "standard-library",
              "first-party",
              "third-party",
              "ckan",
              "ckanext",
              "self",
              "local-folder",
]

[tool.ruff.lint.isort.sections]
# Group all Django imports into a separate section.
ckan = ["ckan"]
ckanext = ["ckanext"]
self = ["ckanext.$PLUGIN"]
